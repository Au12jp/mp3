{
  "version": 3,
  "sources": ["../node_modules/@ffmpeg/ffmpeg/dist/esm/const.js", "../node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js", "../node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js", "../node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js", "../node_modules/@ffmpeg/ffmpeg/dist/esm/index.js", "../node_modules/@ffmpeg/util/dist/esm/errors.js", "../node_modules/@ffmpeg/util/dist/esm/const.js", "../node_modules/@ffmpeg/util/dist/esm/index.js", "main.ts"],
  "sourcesContent": ["export const MIME_TYPE_JAVASCRIPT = \"text/javascript\";\nexport const MIME_TYPE_WASM = \"application/wasm\";\nexport const CORE_VERSION = \"0.12.6\";\nexport const CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;\nexport var FFMessageType;\n(function (FFMessageType) {\n    FFMessageType[\"LOAD\"] = \"LOAD\";\n    FFMessageType[\"EXEC\"] = \"EXEC\";\n    FFMessageType[\"WRITE_FILE\"] = \"WRITE_FILE\";\n    FFMessageType[\"READ_FILE\"] = \"READ_FILE\";\n    FFMessageType[\"DELETE_FILE\"] = \"DELETE_FILE\";\n    FFMessageType[\"RENAME\"] = \"RENAME\";\n    FFMessageType[\"CREATE_DIR\"] = \"CREATE_DIR\";\n    FFMessageType[\"LIST_DIR\"] = \"LIST_DIR\";\n    FFMessageType[\"DELETE_DIR\"] = \"DELETE_DIR\";\n    FFMessageType[\"ERROR\"] = \"ERROR\";\n    FFMessageType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    FFMessageType[\"PROGRESS\"] = \"PROGRESS\";\n    FFMessageType[\"LOG\"] = \"LOG\";\n    FFMessageType[\"MOUNT\"] = \"MOUNT\";\n    FFMessageType[\"UNMOUNT\"] = \"UNMOUNT\";\n})(FFMessageType || (FFMessageType = {}));\n", "/**\n * Generate an unique message ID.\n */\nexport const getMessageID = (() => {\n    let messageID = 0;\n    return () => messageID++;\n})();\n", "export const ERROR_UNKNOWN_MESSAGE_TYPE = new Error(\"unknown message type\");\nexport const ERROR_NOT_LOADED = new Error(\"ffmpeg is not loaded, call `await ffmpeg.load()` first\");\nexport const ERROR_TERMINATED = new Error(\"called FFmpeg.terminate()\");\nexport const ERROR_IMPORT_FAILURE = new Error(\"failed to import ffmpeg-core.js\");\n", "import { FFMessageType } from \"./const.js\";\nimport { getMessageID } from \"./utils.js\";\nimport { ERROR_TERMINATED, ERROR_NOT_LOADED } from \"./errors.js\";\n/**\n * Provides APIs to interact with ffmpeg web worker.\n *\n * @example\n * ```ts\n * const ffmpeg = new FFmpeg();\n * ```\n */\nexport class FFmpeg {\n    #worker = null;\n    /**\n     * #resolves and #rejects tracks Promise resolves and rejects to\n     * be called when we receive message from web worker.\n     */\n    #resolves = {};\n    #rejects = {};\n    #logEventCallbacks = [];\n    #progressEventCallbacks = [];\n    loaded = false;\n    /**\n     * register worker message event handlers.\n     */\n    #registerHandlers = () => {\n        if (this.#worker) {\n            this.#worker.onmessage = ({ data: { id, type, data }, }) => {\n                switch (type) {\n                    case FFMessageType.LOAD:\n                        this.loaded = true;\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.MOUNT:\n                    case FFMessageType.UNMOUNT:\n                    case FFMessageType.EXEC:\n                    case FFMessageType.WRITE_FILE:\n                    case FFMessageType.READ_FILE:\n                    case FFMessageType.DELETE_FILE:\n                    case FFMessageType.RENAME:\n                    case FFMessageType.CREATE_DIR:\n                    case FFMessageType.LIST_DIR:\n                    case FFMessageType.DELETE_DIR:\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.LOG:\n                        this.#logEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.PROGRESS:\n                        this.#progressEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.ERROR:\n                        this.#rejects[id](data);\n                        break;\n                }\n                delete this.#resolves[id];\n                delete this.#rejects[id];\n            };\n        }\n    };\n    /**\n     * Generic function to send messages to web worker.\n     */\n    #send = ({ type, data }, trans = [], signal) => {\n        if (!this.#worker) {\n            return Promise.reject(ERROR_NOT_LOADED);\n        }\n        return new Promise((resolve, reject) => {\n            const id = getMessageID();\n            this.#worker && this.#worker.postMessage({ id, type, data }, trans);\n            this.#resolves[id] = resolve;\n            this.#rejects[id] = reject;\n            signal?.addEventListener(\"abort\", () => {\n                reject(new DOMException(`Message # ${id} was aborted`, \"AbortError\"));\n            }, { once: true });\n        });\n    };\n    on(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks.push(callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks.push(callback);\n        }\n    }\n    off(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks = this.#logEventCallbacks.filter((f) => f !== callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks = this.#progressEventCallbacks.filter((f) => f !== callback);\n        }\n    }\n    /**\n     * Loads ffmpeg-core inside web worker. It is required to call this method first\n     * as it initializes WebAssembly and other essential variables.\n     *\n     * @category FFmpeg\n     * @returns `true` if ffmpeg core is loaded for the first time.\n     */\n    load = ({ classWorkerURL, ...config } = {}, { signal } = {}) => {\n        if (!this.#worker) {\n            this.#worker = classWorkerURL ?\n                new Worker(new URL(classWorkerURL, import.meta.url), {\n                    type: \"module\",\n                }) :\n                // We need to duplicated the code here to enable webpack\n                // to bundle worekr.js here.\n                new Worker(new URL(\"./worker.js\", import.meta.url), {\n                    type: \"module\",\n                });\n            this.#registerHandlers();\n        }\n        return this.#send({\n            type: FFMessageType.LOAD,\n            data: config,\n        }, undefined, signal);\n    };\n    /**\n     * Execute ffmpeg command.\n     *\n     * @remarks\n     * To avoid common I/O issues, [\"-nostdin\", \"-y\"] are prepended to the args\n     * by default.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // ffmpeg -i video.avi video.mp4\n     * await ffmpeg.exec([\"-i\", \"video.avi\", \"video.mp4\"]);\n     * const data = ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    exec = (\n    /** ffmpeg command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.EXEC,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Terminate all ongoing API calls and terminate web worker.\n     * `FFmpeg.load()` must be called again before calling any other APIs.\n     *\n     * @category FFmpeg\n     */\n    terminate = () => {\n        const ids = Object.keys(this.#rejects);\n        // rejects all incomplete Promises.\n        for (const id of ids) {\n            this.#rejects[id](ERROR_TERMINATED);\n            delete this.#rejects[id];\n            delete this.#resolves[id];\n        }\n        if (this.#worker) {\n            this.#worker.terminate();\n            this.#worker = null;\n            this.loaded = false;\n        }\n    };\n    /**\n     * Write data to ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", await fetchFile(\"../video.avi\"));\n     * await ffmpeg.writeFile(\"text.txt\", \"hello world\");\n     * ```\n     *\n     * @category File System\n     */\n    writeFile = (path, data, { signal } = {}) => {\n        const trans = [];\n        if (data instanceof Uint8Array) {\n            trans.push(data.buffer);\n        }\n        return this.#send({\n            type: FFMessageType.WRITE_FILE,\n            data: { path, data },\n        }, trans, signal);\n    };\n    mount = (fsType, options, mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.MOUNT,\n            data: { fsType, options, mountPoint },\n        }, trans);\n    };\n    unmount = (mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.UNMOUNT,\n            data: { mountPoint },\n        }, trans);\n    };\n    /**\n     * Read data from ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * const data = await ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @category File System\n     */\n    readFile = (path, \n    /**\n     * File content encoding, supports two encodings:\n     * - utf8: read file as text file, return data in string type.\n     * - binary: read file as binary file, return data in Uint8Array type.\n     *\n     * @defaultValue binary\n     */\n    encoding = \"binary\", { signal } = {}) => this.#send({\n        type: FFMessageType.READ_FILE,\n        data: { path, encoding },\n    }, undefined, signal);\n    /**\n     * Delete a file.\n     *\n     * @category File System\n     */\n    deleteFile = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_FILE,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Rename a file or directory.\n     *\n     * @category File System\n     */\n    rename = (oldPath, newPath, { signal } = {}) => this.#send({\n        type: FFMessageType.RENAME,\n        data: { oldPath, newPath },\n    }, undefined, signal);\n    /**\n     * Create a directory.\n     *\n     * @category File System\n     */\n    createDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.CREATE_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * List directory contents.\n     *\n     * @category File System\n     */\n    listDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.LIST_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Delete an empty directory.\n     *\n     * @category File System\n     */\n    deleteDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_DIR,\n        data: { path },\n    }, undefined, signal);\n}\n", "export * from \"./classes.js\";\n", "export const ERROR_RESPONSE_BODY_READER = new Error(\"failed to get response body reader\");\nexport const ERROR_INCOMPLETED_DOWNLOAD = new Error(\"failed to complete download\");\n", "export const HeaderContentLength = \"Content-Length\";\n", "import { ERROR_RESPONSE_BODY_READER, ERROR_INCOMPLETED_DOWNLOAD, } from \"./errors.js\";\nimport { HeaderContentLength } from \"./const.js\";\nconst readFromBlobOrFile = (blob) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n        const { result } = fileReader;\n        if (result instanceof ArrayBuffer) {\n            resolve(new Uint8Array(result));\n        }\n        else {\n            resolve(new Uint8Array());\n        }\n    };\n    fileReader.onerror = (event) => {\n        reject(Error(`File could not be read! Code=${event?.target?.error?.code || -1}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n});\n/**\n * An util function to fetch data from url string, base64, URL, File or Blob format.\n *\n * Examples:\n * ```ts\n * // URL\n * await fetchFile(\"http://localhost:3000/video.mp4\");\n * // base64\n * await fetchFile(\"data:<type>;base64,wL2dvYWwgbW9yZ...\");\n * // URL\n * await fetchFile(new URL(\"video.mp4\", import.meta.url));\n * // File\n * fileInput.addEventListener('change', (e) => {\n *   await fetchFile(e.target.files[0]);\n * });\n * // Blob\n * const blob = new Blob(...);\n * await fetchFile(blob);\n * ```\n */\nexport const fetchFile = async (file) => {\n    let data;\n    if (typeof file === \"string\") {\n        /* From base64 format */\n        if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(file)) {\n            data = atob(file.split(\",\")[1])\n                .split(\"\")\n                .map((c) => c.charCodeAt(0));\n            /* From remote server/URL */\n        }\n        else {\n            data = await (await fetch(file)).arrayBuffer();\n        }\n    }\n    else if (file instanceof URL) {\n        data = await (await fetch(file)).arrayBuffer();\n    }\n    else if (file instanceof File || file instanceof Blob) {\n        data = await readFromBlobOrFile(file);\n    }\n    else {\n        return new Uint8Array();\n    }\n    return new Uint8Array(data);\n};\n/**\n * importScript dynamically import a script, useful when you\n * want to use different versions of ffmpeg.wasm based on environment.\n *\n * Example:\n *\n * ```ts\n * await importScript(\"http://localhost:3000/ffmpeg.js\");\n * ```\n */\nexport const importScript = async (url) => new Promise((resolve) => {\n    const script = document.createElement(\"script\");\n    const eventHandler = () => {\n        script.removeEventListener(\"load\", eventHandler);\n        resolve();\n    };\n    script.src = url;\n    script.type = \"text/javascript\";\n    script.addEventListener(\"load\", eventHandler);\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n});\n/**\n * Download content of a URL with progress.\n *\n * Progress only works when Content-Length is provided by the server.\n *\n */\nexport const downloadWithProgress = async (url, cb) => {\n    const resp = await fetch(url);\n    let buf;\n    try {\n        // Set total to -1 to indicate that there is not Content-Type Header.\n        const total = parseInt(resp.headers.get(HeaderContentLength) || \"-1\");\n        const reader = resp.body?.getReader();\n        if (!reader)\n            throw ERROR_RESPONSE_BODY_READER;\n        const chunks = [];\n        let received = 0;\n        for (;;) {\n            const { done, value } = await reader.read();\n            const delta = value ? value.length : 0;\n            if (done) {\n                if (total != -1 && total !== received)\n                    throw ERROR_INCOMPLETED_DOWNLOAD;\n                cb && cb({ url, total, received, delta, done });\n                break;\n            }\n            chunks.push(value);\n            received += delta;\n            cb && cb({ url, total, received, delta, done });\n        }\n        const data = new Uint8Array(received);\n        let position = 0;\n        for (const chunk of chunks) {\n            data.set(chunk, position);\n            position += chunk.length;\n        }\n        buf = data.buffer;\n    }\n    catch (e) {\n        console.log(`failed to send download progress event: `, e);\n        // Fetch arrayBuffer directly when it is not possible to get progress.\n        buf = await resp.arrayBuffer();\n        cb &&\n            cb({\n                url,\n                total: buf.byteLength,\n                received: buf.byteLength,\n                delta: 0,\n                done: true,\n            });\n    }\n    return buf;\n};\n/**\n * toBlobURL fetches data from an URL and return a blob URL.\n *\n * Example:\n *\n * ```ts\n * await toBlobURL(\"http://localhost:3000/ffmpeg.js\", \"text/javascript\");\n * ```\n */\nexport const toBlobURL = async (url, mimeType, progress = false, cb) => {\n    const buf = progress\n        ? await downloadWithProgress(url, cb)\n        : await (await fetch(url)).arrayBuffer();\n    const blob = new Blob([buf], { type: mimeType });\n    return URL.createObjectURL(blob);\n};\n", "import { FFmpeg } from \"@ffmpeg/ffmpeg\";\nimport { FFMessageLoadConfig } from \"@ffmpeg/ffmpeg/dist/esm/types\";\nimport { fetchFile, toBlobURL } from \"@ffmpeg/util\";\n\nconst ffmpeg = new FFmpeg();\n\n// Async function to handle the loading of URLs\nasync function loadFFmpeg() {\n  const config: FFMessageLoadConfig = {\n    classWorkerURL: await toBlobURL(`./core-mt/worker.js`, \"text/javascript\"),\n    coreURL: await toBlobURL(`./core-mt/ffmpeg-core.js`, \"text/javascript\"), // Await the Promise to get the string\n    wasmURL: await toBlobURL(`./core-mt/ffmpeg-core.wasm`, \"application/wasm\"), // Await the Promise\n    workerURL: await toBlobURL(\n      `./core-mt/ffmpeg-core.worker.js`,\n      \"text/javascript\"\n    ), // Await the Promise\n  };\n\n  console.warn(config);\n\n  // Load ffmpeg with the resolved config\n  await ffmpeg.load(config);\n}\n\n// Call the async function\nloadFFmpeg().catch(console.error);\n\n// HTML\u8981\u7D20\u3092\u53D6\u5F97\nconst fileInput = document.getElementById(\"fileInput\") as HTMLInputElement;\nconst trimButton = document.getElementById(\"trimButton\") as HTMLButtonElement;\nconst videoOutput = document.getElementById(\"videoOutput\") as HTMLVideoElement;\n\ntrimButton.addEventListener(\"click\", async () => {\n  if (!fileInput.files || fileInput.files.length === 0) {\n    alert(\"\u307E\u305A\u52D5\u753B\u30D5\u30A1\u30A4\u30EB\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044\u3002\");\n    return;\n  }\n\n  const start = (document.getElementById(\"start\") as HTMLInputElement).value;\n  const end = (document.getElementById(\"end\") as HTMLInputElement).value;\n\n  // \u30C8\u30EA\u30DF\u30F3\u30B0\u51E6\u7406\u3092\u5B9F\u884C\n  const trimmedVideoUrl = await trimVideo(fileInput.files[0], start, end);\n  if (trimmedVideoUrl) {\n    videoOutput.src = trimmedVideoUrl; // \u30C8\u30EA\u30DF\u30F3\u30B0\u3055\u308C\u305F\u52D5\u753B\u3092\u30D7\u30EC\u30D3\u30E5\u30FC\n  }\n});\n\nasync function trimVideo(\n  file: File,\n  startTime: string,\n  endTime: string\n): Promise<string | null> {\n  console.warn(\"ffmpeg loaded\");\n\n  // \u5165\u529B\u30D5\u30A1\u30A4\u30EB\u3092FFmpeg\u306E\u4EEE\u60F3\u30D5\u30A1\u30A4\u30EB\u30B7\u30B9\u30C6\u30E0\u306B\u66F8\u304D\u8FBC\u307F\n  await ffmpeg.writeFile(\"input.mp4\", await fetchFile(file));\n\n  const duration = (parseInt(endTime) - parseInt(startTime)).toString();\n\n  // FFmpeg\u3092\u4F7F\u3063\u3066\u52D5\u753B\u3092\u30C8\u30EA\u30DF\u30F3\u30B0\n  await ffmpeg.exec([\n    \"-i\",\n    \"input.mp4\",\n    \"-ss\",\n    startTime,\n    \"-t\",\n    duration,\n    \"output.mp4\",\n  ]);\n\n  // \u30C8\u30EA\u30DF\u30F3\u30B0\u5F8C\u306E\u30D5\u30A1\u30A4\u30EB\u3092\u8AAD\u307F\u8FBC\u307F\n  const data = await ffmpeg.readFile(\"output.mp4\");\n  const videoBlob = new Blob([new Uint8Array(data as Uint8Array)], {\n    type: \"video/mp4\",\n  });\n\n  // \u30C8\u30EA\u30DF\u30F3\u30B0\u3055\u308C\u305F\u52D5\u753B\u306EURL\u3092\u4F5C\u6210\n  return URL.createObjectURL(videoBlob);\n}\n"],
  "mappings": "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",
  "names": ["CORE_VERSION", "CORE_URL", "FFMessageType", "init_const", "__esmMin", "getMessageID", "init_utils", "__esmMin", "messageID", "ERROR_UNKNOWN_MESSAGE_TYPE", "ERROR_NOT_LOADED", "ERROR_TERMINATED", "ERROR_IMPORT_FAILURE", "init_errors", "__esmMin", "import_meta", "_worker", "_resolves", "_rejects", "_logEventCallbacks", "_progressEventCallbacks", "_registerHandlers", "_send", "FFmpeg", "init_classes", "__esmMin", "init_const", "init_utils", "init_errors", "__privateAdd", "__publicField", "__privateGet", "id", "type", "data", "FFMessageType", "f", "trans", "signal", "resolve", "reject", "getMessageID", "ERROR_NOT_LOADED", "_a", "_b", "classWorkerURL", "config", "__objRest", "__privateSet", "args", "timeout", "ids", "ERROR_TERMINATED", "path", "fsType", "options", "mountPoint", "encoding", "oldPath", "newPath", "event", "callback", "init_esm", "__esmMin", "init_classes", "ERROR_RESPONSE_BODY_READER", "ERROR_INCOMPLETED_DOWNLOAD", "init_errors", "__esmMin", "HeaderContentLength", "init_const", "__esmMin", "readFromBlobOrFile", "fetchFile", "downloadWithProgress", "toBlobURL", "init_esm", "__esmMin", "init_errors", "init_const", "blob", "resolve", "reject", "fileReader", "result", "event", "_a", "_b", "file", "__async", "data", "c", "url", "cb", "resp", "buf", "total", "HeaderContentLength", "reader", "ERROR_RESPONSE_BODY_READER", "chunks", "received", "done", "value", "delta", "ERROR_INCOMPLETED_DOWNLOAD", "position", "chunk", "e", "mimeType", "progress", "require_main", "__commonJSMin", "exports", "init_esm", "ffmpeg", "FFmpeg", "loadFFmpeg", "__async", "config", "toBlobURL", "fileInput", "trimButton", "videoOutput", "start", "end", "trimmedVideoUrl", "trimVideo", "file", "startTime", "endTime", "fetchFile", "duration", "data", "videoBlob"]
}
