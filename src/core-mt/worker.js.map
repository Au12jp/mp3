{
  "version": 3,
  "sources": ["../../node_modules/@ffmpeg/ffmpeg/dist/esm/const.js", "../../node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js", "../../node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js", "../../node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js", "../../node_modules/@ffmpeg/util/dist/esm/errors.js", "../../node_modules/@ffmpeg/util/dist/esm/const.js", "../../node_modules/@ffmpeg/util/dist/esm/index.js", "worker.ts"],
  "sourcesContent": ["export const MIME_TYPE_JAVASCRIPT = \"text/javascript\";\nexport const MIME_TYPE_WASM = \"application/wasm\";\nexport const CORE_VERSION = \"0.12.6\";\nexport const CORE_URL = `https://unpkg.com/@ffmpeg/core@${CORE_VERSION}/dist/umd/ffmpeg-core.js`;\nexport var FFMessageType;\n(function (FFMessageType) {\n    FFMessageType[\"LOAD\"] = \"LOAD\";\n    FFMessageType[\"EXEC\"] = \"EXEC\";\n    FFMessageType[\"WRITE_FILE\"] = \"WRITE_FILE\";\n    FFMessageType[\"READ_FILE\"] = \"READ_FILE\";\n    FFMessageType[\"DELETE_FILE\"] = \"DELETE_FILE\";\n    FFMessageType[\"RENAME\"] = \"RENAME\";\n    FFMessageType[\"CREATE_DIR\"] = \"CREATE_DIR\";\n    FFMessageType[\"LIST_DIR\"] = \"LIST_DIR\";\n    FFMessageType[\"DELETE_DIR\"] = \"DELETE_DIR\";\n    FFMessageType[\"ERROR\"] = \"ERROR\";\n    FFMessageType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    FFMessageType[\"PROGRESS\"] = \"PROGRESS\";\n    FFMessageType[\"LOG\"] = \"LOG\";\n    FFMessageType[\"MOUNT\"] = \"MOUNT\";\n    FFMessageType[\"UNMOUNT\"] = \"UNMOUNT\";\n})(FFMessageType || (FFMessageType = {}));\n", "/**\n * Generate an unique message ID.\n */\nexport const getMessageID = (() => {\n    let messageID = 0;\n    return () => messageID++;\n})();\n", "export const ERROR_UNKNOWN_MESSAGE_TYPE = new Error(\"unknown message type\");\nexport const ERROR_NOT_LOADED = new Error(\"ffmpeg is not loaded, call `await ffmpeg.load()` first\");\nexport const ERROR_TERMINATED = new Error(\"called FFmpeg.terminate()\");\nexport const ERROR_IMPORT_FAILURE = new Error(\"failed to import ffmpeg-core.js\");\n", "import { FFMessageType } from \"./const.js\";\nimport { getMessageID } from \"./utils.js\";\nimport { ERROR_TERMINATED, ERROR_NOT_LOADED } from \"./errors.js\";\n/**\n * Provides APIs to interact with ffmpeg web worker.\n *\n * @example\n * ```ts\n * const ffmpeg = new FFmpeg();\n * ```\n */\nexport class FFmpeg {\n    #worker = null;\n    /**\n     * #resolves and #rejects tracks Promise resolves and rejects to\n     * be called when we receive message from web worker.\n     */\n    #resolves = {};\n    #rejects = {};\n    #logEventCallbacks = [];\n    #progressEventCallbacks = [];\n    loaded = false;\n    /**\n     * register worker message event handlers.\n     */\n    #registerHandlers = () => {\n        if (this.#worker) {\n            this.#worker.onmessage = ({ data: { id, type, data }, }) => {\n                switch (type) {\n                    case FFMessageType.LOAD:\n                        this.loaded = true;\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.MOUNT:\n                    case FFMessageType.UNMOUNT:\n                    case FFMessageType.EXEC:\n                    case FFMessageType.WRITE_FILE:\n                    case FFMessageType.READ_FILE:\n                    case FFMessageType.DELETE_FILE:\n                    case FFMessageType.RENAME:\n                    case FFMessageType.CREATE_DIR:\n                    case FFMessageType.LIST_DIR:\n                    case FFMessageType.DELETE_DIR:\n                        this.#resolves[id](data);\n                        break;\n                    case FFMessageType.LOG:\n                        this.#logEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.PROGRESS:\n                        this.#progressEventCallbacks.forEach((f) => f(data));\n                        break;\n                    case FFMessageType.ERROR:\n                        this.#rejects[id](data);\n                        break;\n                }\n                delete this.#resolves[id];\n                delete this.#rejects[id];\n            };\n        }\n    };\n    /**\n     * Generic function to send messages to web worker.\n     */\n    #send = ({ type, data }, trans = [], signal) => {\n        if (!this.#worker) {\n            return Promise.reject(ERROR_NOT_LOADED);\n        }\n        return new Promise((resolve, reject) => {\n            const id = getMessageID();\n            this.#worker && this.#worker.postMessage({ id, type, data }, trans);\n            this.#resolves[id] = resolve;\n            this.#rejects[id] = reject;\n            signal?.addEventListener(\"abort\", () => {\n                reject(new DOMException(`Message # ${id} was aborted`, \"AbortError\"));\n            }, { once: true });\n        });\n    };\n    on(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks.push(callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks.push(callback);\n        }\n    }\n    off(event, callback) {\n        if (event === \"log\") {\n            this.#logEventCallbacks = this.#logEventCallbacks.filter((f) => f !== callback);\n        }\n        else if (event === \"progress\") {\n            this.#progressEventCallbacks = this.#progressEventCallbacks.filter((f) => f !== callback);\n        }\n    }\n    /**\n     * Loads ffmpeg-core inside web worker. It is required to call this method first\n     * as it initializes WebAssembly and other essential variables.\n     *\n     * @category FFmpeg\n     * @returns `true` if ffmpeg core is loaded for the first time.\n     */\n    load = ({ classWorkerURL, ...config } = {}, { signal } = {}) => {\n        if (!this.#worker) {\n            this.#worker = classWorkerURL ?\n                new Worker(new URL(classWorkerURL, import.meta.url), {\n                    type: \"module\",\n                }) :\n                // We need to duplicated the code here to enable webpack\n                // to bundle worekr.js here.\n                new Worker(new URL(\"./worker.js\", import.meta.url), {\n                    type: \"module\",\n                });\n            this.#registerHandlers();\n        }\n        return this.#send({\n            type: FFMessageType.LOAD,\n            data: config,\n        }, undefined, signal);\n    };\n    /**\n     * Execute ffmpeg command.\n     *\n     * @remarks\n     * To avoid common I/O issues, [\"-nostdin\", \"-y\"] are prepended to the args\n     * by default.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", ...);\n     * // ffmpeg -i video.avi video.mp4\n     * await ffmpeg.exec([\"-i\", \"video.avi\", \"video.mp4\"]);\n     * const data = ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @returns `0` if no error, `!= 0` if timeout (1) or error.\n     * @category FFmpeg\n     */\n    exec = (\n    /** ffmpeg command line args */\n    args, \n    /**\n     * milliseconds to wait before stopping the command execution.\n     *\n     * @defaultValue -1\n     */\n    timeout = -1, { signal } = {}) => this.#send({\n        type: FFMessageType.EXEC,\n        data: { args, timeout },\n    }, undefined, signal);\n    /**\n     * Terminate all ongoing API calls and terminate web worker.\n     * `FFmpeg.load()` must be called again before calling any other APIs.\n     *\n     * @category FFmpeg\n     */\n    terminate = () => {\n        const ids = Object.keys(this.#rejects);\n        // rejects all incomplete Promises.\n        for (const id of ids) {\n            this.#rejects[id](ERROR_TERMINATED);\n            delete this.#rejects[id];\n            delete this.#resolves[id];\n        }\n        if (this.#worker) {\n            this.#worker.terminate();\n            this.#worker = null;\n            this.loaded = false;\n        }\n    };\n    /**\n     * Write data to ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * await ffmpeg.writeFile(\"video.avi\", await fetchFile(\"../video.avi\"));\n     * await ffmpeg.writeFile(\"text.txt\", \"hello world\");\n     * ```\n     *\n     * @category File System\n     */\n    writeFile = (path, data, { signal } = {}) => {\n        const trans = [];\n        if (data instanceof Uint8Array) {\n            trans.push(data.buffer);\n        }\n        return this.#send({\n            type: FFMessageType.WRITE_FILE,\n            data: { path, data },\n        }, trans, signal);\n    };\n    mount = (fsType, options, mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.MOUNT,\n            data: { fsType, options, mountPoint },\n        }, trans);\n    };\n    unmount = (mountPoint) => {\n        const trans = [];\n        return this.#send({\n            type: FFMessageType.UNMOUNT,\n            data: { mountPoint },\n        }, trans);\n    };\n    /**\n     * Read data from ffmpeg.wasm.\n     *\n     * @example\n     * ```ts\n     * const ffmpeg = new FFmpeg();\n     * await ffmpeg.load();\n     * const data = await ffmpeg.readFile(\"video.mp4\");\n     * ```\n     *\n     * @category File System\n     */\n    readFile = (path, \n    /**\n     * File content encoding, supports two encodings:\n     * - utf8: read file as text file, return data in string type.\n     * - binary: read file as binary file, return data in Uint8Array type.\n     *\n     * @defaultValue binary\n     */\n    encoding = \"binary\", { signal } = {}) => this.#send({\n        type: FFMessageType.READ_FILE,\n        data: { path, encoding },\n    }, undefined, signal);\n    /**\n     * Delete a file.\n     *\n     * @category File System\n     */\n    deleteFile = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_FILE,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Rename a file or directory.\n     *\n     * @category File System\n     */\n    rename = (oldPath, newPath, { signal } = {}) => this.#send({\n        type: FFMessageType.RENAME,\n        data: { oldPath, newPath },\n    }, undefined, signal);\n    /**\n     * Create a directory.\n     *\n     * @category File System\n     */\n    createDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.CREATE_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * List directory contents.\n     *\n     * @category File System\n     */\n    listDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.LIST_DIR,\n        data: { path },\n    }, undefined, signal);\n    /**\n     * Delete an empty directory.\n     *\n     * @category File System\n     */\n    deleteDir = (path, { signal } = {}) => this.#send({\n        type: FFMessageType.DELETE_DIR,\n        data: { path },\n    }, undefined, signal);\n}\n", "export const ERROR_RESPONSE_BODY_READER = new Error(\"failed to get response body reader\");\nexport const ERROR_INCOMPLETED_DOWNLOAD = new Error(\"failed to complete download\");\n", "export const HeaderContentLength = \"Content-Length\";\n", "import { ERROR_RESPONSE_BODY_READER, ERROR_INCOMPLETED_DOWNLOAD, } from \"./errors.js\";\nimport { HeaderContentLength } from \"./const.js\";\nconst readFromBlobOrFile = (blob) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n        const { result } = fileReader;\n        if (result instanceof ArrayBuffer) {\n            resolve(new Uint8Array(result));\n        }\n        else {\n            resolve(new Uint8Array());\n        }\n    };\n    fileReader.onerror = (event) => {\n        reject(Error(`File could not be read! Code=${event?.target?.error?.code || -1}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n});\n/**\n * An util function to fetch data from url string, base64, URL, File or Blob format.\n *\n * Examples:\n * ```ts\n * // URL\n * await fetchFile(\"http://localhost:3000/video.mp4\");\n * // base64\n * await fetchFile(\"data:<type>;base64,wL2dvYWwgbW9yZ...\");\n * // URL\n * await fetchFile(new URL(\"video.mp4\", import.meta.url));\n * // File\n * fileInput.addEventListener('change', (e) => {\n *   await fetchFile(e.target.files[0]);\n * });\n * // Blob\n * const blob = new Blob(...);\n * await fetchFile(blob);\n * ```\n */\nexport const fetchFile = async (file) => {\n    let data;\n    if (typeof file === \"string\") {\n        /* From base64 format */\n        if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(file)) {\n            data = atob(file.split(\",\")[1])\n                .split(\"\")\n                .map((c) => c.charCodeAt(0));\n            /* From remote server/URL */\n        }\n        else {\n            data = await (await fetch(file)).arrayBuffer();\n        }\n    }\n    else if (file instanceof URL) {\n        data = await (await fetch(file)).arrayBuffer();\n    }\n    else if (file instanceof File || file instanceof Blob) {\n        data = await readFromBlobOrFile(file);\n    }\n    else {\n        return new Uint8Array();\n    }\n    return new Uint8Array(data);\n};\n/**\n * importScript dynamically import a script, useful when you\n * want to use different versions of ffmpeg.wasm based on environment.\n *\n * Example:\n *\n * ```ts\n * await importScript(\"http://localhost:3000/ffmpeg.js\");\n * ```\n */\nexport const importScript = async (url) => new Promise((resolve) => {\n    const script = document.createElement(\"script\");\n    const eventHandler = () => {\n        script.removeEventListener(\"load\", eventHandler);\n        resolve();\n    };\n    script.src = url;\n    script.type = \"text/javascript\";\n    script.addEventListener(\"load\", eventHandler);\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n});\n/**\n * Download content of a URL with progress.\n *\n * Progress only works when Content-Length is provided by the server.\n *\n */\nexport const downloadWithProgress = async (url, cb) => {\n    const resp = await fetch(url);\n    let buf;\n    try {\n        // Set total to -1 to indicate that there is not Content-Type Header.\n        const total = parseInt(resp.headers.get(HeaderContentLength) || \"-1\");\n        const reader = resp.body?.getReader();\n        if (!reader)\n            throw ERROR_RESPONSE_BODY_READER;\n        const chunks = [];\n        let received = 0;\n        for (;;) {\n            const { done, value } = await reader.read();\n            const delta = value ? value.length : 0;\n            if (done) {\n                if (total != -1 && total !== received)\n                    throw ERROR_INCOMPLETED_DOWNLOAD;\n                cb && cb({ url, total, received, delta, done });\n                break;\n            }\n            chunks.push(value);\n            received += delta;\n            cb && cb({ url, total, received, delta, done });\n        }\n        const data = new Uint8Array(received);\n        let position = 0;\n        for (const chunk of chunks) {\n            data.set(chunk, position);\n            position += chunk.length;\n        }\n        buf = data.buffer;\n    }\n    catch (e) {\n        console.log(`failed to send download progress event: `, e);\n        // Fetch arrayBuffer directly when it is not possible to get progress.\n        buf = await resp.arrayBuffer();\n        cb &&\n            cb({\n                url,\n                total: buf.byteLength,\n                received: buf.byteLength,\n                delta: 0,\n                done: true,\n            });\n    }\n    return buf;\n};\n/**\n * toBlobURL fetches data from an URL and return a blob URL.\n *\n * Example:\n *\n * ```ts\n * await toBlobURL(\"http://localhost:3000/ffmpeg.js\", \"text/javascript\");\n * ```\n */\nexport const toBlobURL = async (url, mimeType, progress = false, cb) => {\n    const buf = progress\n        ? await downloadWithProgress(url, cb)\n        : await (await fetch(url)).arrayBuffer();\n    const blob = new Blob([buf], { type: mimeType });\n    return URL.createObjectURL(blob);\n};\n", "import { FFmpeg } from \"@ffmpeg/ffmpeg\";\nimport { FFMessageLoadConfig } from \"@ffmpeg/ffmpeg/dist/esm/types\";\nimport { toBlobURL } from \"@ffmpeg/util\";\n\nexport type WorkerCommand = \"load\" | \"writeFile\" | \"readFile\" | \"run\";\n\nexport interface WorkerMessage {\n  command: WorkerCommand;\n  args: any[];\n}\n\nexport interface WriteFileArgs {\n  fileName: string;\n  fileData: Uint8Array;\n}\n\nexport interface ReadFileArgs {\n  fileName: string;\n}\n\nexport interface RunCommandArgs {\n  commandArgs: string[];\n}\n\nexport let ffmpeg: FFmpeg | null = null;\n\nself.addEventListener(\"message\", async (event: MessageEvent<WorkerMessage>) => {\n  const { command, args } = event.data;\n\n  if (!ffmpeg && command !== \"load\") {\n    self.postMessage({ status: \"error\", message: \"FFmpeg is not loaded.\" });\n    return;\n  }\n\n  switch (command) {\n    case \"load\":\n      await loadFFmpeg();\n      break;\n    case \"writeFile\":\n      await handleWriteFile(args as unknown as WriteFileArgs);\n      break;\n    case \"readFile\":\n      await handleReadFile(args as unknown as ReadFileArgs);\n      break;\n    case \"run\":\n      await handleRun(args as unknown as RunCommandArgs);\n      break;\n    default:\n      console.error(`Unknown command: ${command}`);\n  }\n});\n\nasync function loadFFmpeg() {\n  try {\n    if (ffmpeg === null) {\n      ffmpeg = new FFmpeg();\n      const baseURL = \"./core-mt\";\n\n      const config: FFMessageLoadConfig = {\n        classWorkerURL: await toBlobURL(\n          `${baseURL}/worker.js`,\n          \"text/javascript\"\n        ),\n        coreURL: await toBlobURL(\n          `${baseURL}/ffmpeg-core.js`,\n          \"text/javascript\"\n        ),\n        wasmURL: await toBlobURL(\n          `${baseURL}/ffmpeg-core.wasm`,\n          \"application/wasm\"\n        ),\n        workerURL: await toBlobURL(\n          `${baseURL}/ffmpeg-core.worker.js`,\n          \"text/javascript\"\n        ),\n      };\n\n      await ffmpeg.load(config);\n      self.postMessage({ status: \"loaded\" });\n    } else {\n      self.postMessage({ status: \"already-loaded\" });\n    }\n  } catch (error) {\n    self.postMessage({\n      status: \"error\",\n      message: error instanceof Error ? error.message : String(error),\n    });\n  }\n}\n\nasync function handleWriteFile(args: WriteFileArgs) {\n  try {\n    if (ffmpeg) {\n      await ffmpeg.writeFile(args.fileName, args.fileData);\n      self.postMessage({ status: \"file-written\" });\n    }\n  } catch (error) {\n    self.postMessage({\n      status: \"error\",\n      message: error instanceof Error ? error.message : String(error),\n    });\n  }\n}\n\nasync function handleReadFile(args: ReadFileArgs) {\n  try {\n    if (ffmpeg) {\n      const data = await ffmpeg.readFile(args.fileName);\n      self.postMessage({ result: data });\n    }\n  } catch (error) {\n    self.postMessage({\n      status: \"error\",\n      message: error instanceof Error ? error.message : String(error),\n    });\n  }\n}\n\nasync function handleRun(args: RunCommandArgs) {\n  try {\n    if (ffmpeg) {\n      let startTime = performance.now();\n      ffmpeg.on(\"progress\", ({ progress }) => {\n        const elapsedTime = (performance.now() - startTime) / 1000; // in seconds\n\n        const percent = progress * 100;\n\n        const estimatedTotalTime = elapsedTime / progress;\n        const estimatedRemainingTime = estimatedTotalTime - elapsedTime;\n\n        // Send progress information back to the main thread\n        self.postMessage({\n          status: \"progress\",\n          percent: Math.round(percent),\n          elapsedTime: Math.round(elapsedTime),\n          estimatedRemainingTime: Math.round(estimatedRemainingTime),\n        });\n      });\n\n      const result = await ffmpeg.exec(args.commandArgs);\n      self.postMessage({ status: \"execution-completed\", result });\n    }\n  } catch (error) {\n    self.postMessage({\n      status: \"error\",\n      message: error instanceof Error ? error.message : String(error),\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": ["CORE_VERSION", "CORE_URL", "FFMessageType", "getMessageID", "messageID", "ERROR_UNKNOWN_MESSAGE_TYPE", "ERROR_NOT_LOADED", "ERROR_TERMINATED", "ERROR_IMPORT_FAILURE", "import_meta", "_worker", "_resolves", "_rejects", "_logEventCallbacks", "_progressEventCallbacks", "_registerHandlers", "_send", "FFmpeg", "__privateAdd", "__publicField", "__privateGet", "id", "type", "data", "FFMessageType", "f", "trans", "signal", "resolve", "reject", "getMessageID", "ERROR_NOT_LOADED", "_a", "_b", "classWorkerURL", "config", "__objRest", "__privateSet", "import_meta", "args", "timeout", "ids", "ERROR_TERMINATED", "path", "fsType", "options", "mountPoint", "encoding", "oldPath", "newPath", "event", "callback", "ERROR_RESPONSE_BODY_READER", "ERROR_INCOMPLETED_DOWNLOAD", "HeaderContentLength", "downloadWithProgress", "url", "cb", "__async", "_a", "resp", "buf", "total", "HeaderContentLength", "reader", "ERROR_RESPONSE_BODY_READER", "chunks", "received", "done", "value", "delta", "ERROR_INCOMPLETED_DOWNLOAD", "data", "position", "chunk", "e", "toBlobURL", "mimeType", "progress", "blob", "ffmpeg", "event", "__async", "command", "args", "loadFFmpeg", "handleWriteFile", "handleReadFile", "handleRun", "FFmpeg", "baseURL", "config", "toBlobURL", "error", "data", "startTime", "progress", "elapsedTime", "percent", "estimatedRemainingTime", "result"]
}
